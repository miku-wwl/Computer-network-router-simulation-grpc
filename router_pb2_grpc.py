# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import router_pb2 as router__pb2


class RouterStub(object):
    """编写服务, 每个服务里面有相应的函数(对应restful视图函数)
    service表示创建服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.hello_router = channel.unary_unary(
                '/test.Router/hello_router',
                request_serializer=router__pb2.request.SerializeToString,
                response_deserializer=router__pb2.response.FromString,
                )


class RouterServicer(object):
    """编写服务, 每个服务里面有相应的函数(对应restful视图函数)
    service表示创建服务
    """

    def hello_router(self, request, context):
        """使用rpc定义函数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'hello_router': grpc.unary_unary_rpc_method_handler(
                    servicer.hello_router,
                    request_deserializer=router__pb2.request.FromString,
                    response_serializer=router__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'test.Router', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Router(object):
    """编写服务, 每个服务里面有相应的函数(对应restful视图函数)
    service表示创建服务
    """

    @staticmethod
    def hello_router(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.Router/hello_router',
            router__pb2.request.SerializeToString,
            router__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
